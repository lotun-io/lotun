{"version":3,"file":"socket-client.js","sourceRoot":"","sources":["../src/socket-client.ts"],"names":[],"mappings":"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","sourcesContent":["import net from 'net';\nimport tls from 'tls';\nimport WebSocket from 'ws';\nimport { LotunClient } from './client';\nimport { getSystemInfo } from './system-info';\nimport { WebsocketStream, ClientError } from './wsStream/WsStream';\nimport { version as WsStreamVersion } from './wsStream/WsStream';\n\nconst clientVersion = require('../package.json').version;\n\n/*\nconst HttpsProxyAgent = require('https-proxy-agent');\nconst usProxyAgent = new HttpsProxyAgent('http://12.131.182.225:38606');\n*/\n\n// let lotunClient: LotunClient;\n// const appPrivate = require('./app-private');\n\nconst createSocketConnection = (lotunClient: LotunClient) => {\n  const ws = new WebSocket(`${lotunClient.connectUrl}`, {\n    handshakeTimeout: 10000,\n    headers: {\n      authorization: lotunClient.deviceToken || '',\n      'x-ws-stream-version': WsStreamVersion,\n      'x-lotun-client-version': clientVersion,\n    },\n  });\n\n  const wsStream = new WebsocketStream(ws);\n\n  wsStream.on('stream', (options: any) => {\n    console.log('stream', options.header);\n    const { stream, header } = options;\n    const forward = header;\n\n    // console.log('forward', forward);\n\n    let socket: net.Socket;\n    if (forward.type === 'TCP') {\n      socket = net.connect(forward.socket);\n    } else if (forward.type === 'TLS') {\n      socket = tls.connect({\n        ...forward.socket,\n        ...forward.tls,\n      });\n    } else {\n      // not supported\n      stream.destroy();\n      return;\n    }\n\n    const socketOnError = (err: any) => {\n      // console.log('socket.error');\n      stream.sendError(err);\n      stream.destroy();\n      socket.destroy();\n    };\n\n    const socketOnTimeout = () => {\n      // socket.close();\n      socket.destroy();\n    };\n\n    socket.on('error', socketOnError);\n    socket.on('timeout', socketOnTimeout);\n    socket.once('close', () => {\n      socket.removeListener('error', socketOnError);\n      socket.removeListener('timeout', socketOnTimeout);\n    });\n\n    if (forward.timeout) {\n      socket.setTimeout(forward.timeout);\n    }\n\n    if (forward.keepAlive) {\n      socket.setKeepAlive(true, forward.keepAlive);\n    }\n\n    socket.pipe(stream).pipe(socket);\n  });\n\n  wsStream.on('message', (message: any) => {\n    if (message.type === 'connect') {\n      lotunClient.emit('connect');\n    }\n  });\n\n  function heartbeat() {\n    // @ts-ignore\n    clearTimeout(ws.pingTimeout);\n    // @ts-ignore\n    ws.pingTimeout = setTimeout(() => {\n      ws.terminate();\n    }, 15000);\n  }\n\n  const wsOnOpen = async () => {\n    heartbeat();\n\n    wsStream.send({\n      type: 'clientInfo',\n      data: {\n        systemInfo: await getSystemInfo(),\n      },\n    });\n  };\n\n  const wsOnPing = async () => {\n    heartbeat();\n  };\n\n  const wsReconnectOnClose = (code: any, reason: any) => {\n    lotunClient.emit('close', code, reason);\n\n    setTimeout(() => {\n      createSocketConnection(lotunClient);\n    }, 5000);\n  };\n\n  const wsOnError = () => {\n    ws.terminate();\n  };\n\n  ws.on('open', wsOnOpen);\n  ws.on('ping', wsOnPing);\n  ws.on('error', wsOnError);\n\n  ws.on('close', async (code, reason) => {\n    if (code === 1006) {\n      try {\n        // @ts-ignore\n        reason = ws._req.res.headers['x-lotun-close-reason'];\n      } catch {}\n    }\n\n    if (!reason) {\n      reason = <ClientError>'CONNECTION_ERROR';\n    }\n\n    wsReconnectOnClose(code, reason);\n  });\n};\n\nexport function createConnection(lc: LotunClient) {\n  createSocketConnection(lc);\n}\n"]}