{"version":3,"file":"system-info.js","sourceRoot":"","sources":["../src/system-info.ts"],"names":[],"mappings":";;;;;AAAA,0EAAmC;AAE5B,KAAK,UAAU,aAAa;IACjC,IAAI,EAAE,GAAG,EAAE,CAAC;IACZ,IAAI;QACF,EAAE,GAAG,MAAM,2BAAE,CAAC,MAAM,EAAE,CAAC;KACxB;IAAC,WAAM,GAAE;IAEV,OAAO;QACL,EAAE;KACH,CAAC;AACJ,CAAC;AATD,sCASC;AACD;;;;EAIE;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuDE","sourcesContent":["import si from 'systeminformation';\n\nexport async function getSystemInfo() {\n  let os = {};\n  try {\n    os = await si.osInfo();\n  } catch {}\n\n  return {\n    os,\n  };\n}\n/*\nconst defaultGateway = require('default-gateway');\nconst arp = require('arp');\nconst os = require('os');\n*/\n/*\nexport function getSystemInfo() {\n  return Promise.all([\n    si.system(),\n    si.bios(),\n    si.baseboard(),\n    si.osInfo(),\n    si.versions(),\n    si.cpu(),\n    si.cpuFlags(),\n    si.graphics(),\n    si.networkInterfaces(),\n    si.networkInterfaceDefault(),\n    si.memLayout(),\n    si.diskLayout(),\n    defaultGateway.v4().then(\n      res =>\n        new Promise(resolve => {\n          arp.getMAC(res.gateway, (err, mac) => {\n            if (err != null) {\n              res.mac = mac;\n            }\n            resolve(res);\n          });\n        }),\n    ),\n  ]).then(res => {\n    const data = {};\n    data.system = res[0];\n    data.bios = res[1];\n    data.baseboard = res[2];\n    data.os = res[3];\n    data.versions = res[4];\n    data.cpu = res[5];\n    data.cpu.flags = res[6];\n    data.graphics = res[7];\n    data.net = res[8];\n    data.netDefault = data.net\n      .filter(one => {\n        if (one.iface === res[9]) {\n          return true;\n        }\n        return false;\n      })\n      .shift();\n    data.memLayout = res[10];\n    data.diskLayout = res[11];\n    data.gatewayDefault = res[12];\n    data.userInfo = os.userInfo();\n\n    data.versions.lotun = null;\n    return data;\n  });\n  \n}\n*/\n"]}