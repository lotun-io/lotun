{"version":3,"file":"client.js","sourceRoot":"","sources":["../src/client.ts"],"names":[],"mappings":";;;;;AAAA,oDAAkC;AAClC,mDAAmD;AACnD,kDAA0B;AAK1B,MAAa,WAAY,SAAQ,gBAAY;IAM3C,YAAY,KAAiB;QAC3B,KAAK,EAAE,CAAC;QAER,IAAI,OAAO,GAAG,UAAU,CAAC;QAEzB,IAAI,KAAK,KAAK,OAAO,EAAE;YACrB,OAAO,GAAG,gBAAgB,CAAC;SAC5B;QAED,IAAI,KAAK,KAAK,OAAO,EAAE;YACrB,OAAO,GAAG,gBAAgB,CAAC;SAC5B;QAED,IAAI,CAAC,UAAU,GAAG,gBAAgB,OAAO,EAAE,CAAC;QAC5C,IAAI,CAAC,aAAa,GAAG,eAAe,OAAO,UAAU,CAAC;QACtD,IAAI,CAAC,YAAY,GAAG,qBAAqB,OAAO,EAAE,CAAC;IACrD,CAAC;IAED,KAAK,CAAC,mBAAmB;QACvB,MAAM,GAAG,GAAG,MAAM,eAAK,CAAC;YACtB,GAAG,EAAE,IAAI,CAAC,aAAa;YACvB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE;gBACJ,KAAK,EAAE;;;;;;;;WAQJ;aACJ;SACF,CAAC,CAAC;QAEH,IACE,GAAG,CAAC,IAAI;YACR,GAAG,CAAC,IAAI,CAAC,IAAI;YACb,GAAG,CAAC,IAAI,CAAC,IAAI;YACb,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB;YACjC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,EACtC;YACA,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC;SACrD;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;IACH,CAAC;IAED,OAAO;QACL,gCAAgB,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED,cAAc,CAAC,WAAmB;QAChC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;CACF;AA7DD,kCA6DC","sourcesContent":["import EventEmitter from 'events';\nimport { createConnection } from './socket-client';\nimport axios from 'axios';\n\nexport { ClientError as LotunClientError } from './wsStream/WsStream';\n\ntype StageType = 'devel' | 'stage';\nexport class LotunClient extends EventEmitter {\n  public connectUrl: string;\n  public connectUrlApi: string;\n  public dashboardUrl: string;\n  public deviceToken: string | undefined;\n\n  constructor(stage?: StageType) {\n    super();\n\n    let baseUrl = 'lotun.io';\n\n    if (stage === 'devel') {\n      baseUrl = 'devel.lotun.io';\n    }\n\n    if (stage === 'stage') {\n      baseUrl = 'stage.lotun.io';\n    }\n\n    this.connectUrl = `wss://device.${baseUrl}`;\n    this.connectUrlApi = `https://api.${baseUrl}/graphql`;\n    this.dashboardUrl = `https://dashboard.${baseUrl}`;\n  }\n\n  async generateDeviceToken() {\n    const res = await axios({\n      url: this.connectUrlApi,\n      method: 'post',\n      data: {\n        query: `\n          query {\n            generateDeviceToken {\n              data {\n                token\n              }\n            }\n          }\n          `,\n      },\n    });\n\n    if (\n      res.data &&\n      res.data.data &&\n      res.data.data &&\n      res.data.data.generateDeviceToken &&\n      res.data.data.generateDeviceToken.data\n    ) {\n      return res.data.data.generateDeviceToken.data.token;\n    } else {\n      throw new Error('Cannot generate token');\n    }\n  }\n\n  connect() {\n    createConnection(this);\n  }\n\n  setDeviceToken(deviceToken: string) {\n    this.deviceToken = deviceToken;\n  }\n}\n"]}